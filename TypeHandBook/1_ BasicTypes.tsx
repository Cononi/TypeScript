// Basic Types List
/*
 Type Script allows you to define types in Javascript code, such as variables and functions.
 타입 스크립트로 변수나 함수와 같은 자바스크립트 코드에 타입을 정의할 수 있습니다.
 
 There are 12 basic types in TypeScript
 타입스크립트의 기본 타입에는 크게 다음 12가지가 있습니다.

 */

/*--------------------------------------------------------------------

                    Boolean - 참,거짓(논리형) 타입

---------------------------------------------------------------------*/                    
let bool:boolean = true


/*--------------------------------------------------------------------

                    Number - 숫자형 : 숫자로 이루어진 타입

---------------------------------------------------------------------*/
let num:number = 29


/*--------------------------------------------------------------------

                    String - 문자열 : 문자로 이루어진 타입

---------------------------------------------------------------------*/
let str:string = "Cononi"


/*--------------------------------------------------------------------

                    Object - 객체형 : 실제로 존재하는 것에 대한 구조체

---------------------------------------------------------------------*/
let profile:Object = {
    name : "Cononi",
    age : "29",
    job : "BackEnd Programmer"
}


/*--------------------------------------------------------------------

                    Array - 배열 : 같은 타입의 변수들로 이루어진 유한 집합

---------------------------------------------------------------------*/
let arrA:number[] = [1,2,3] // 타입이 배열인 경우
let arrG:Array<number> = [1,2,3] // 제네릭인 경우


/*--------------------------------------------------------------------
    
    Tuple - 튜플형 : 배열의 길이가 고정되고 각 요소의 타입이 지정되어 있는 배열 형식을 의미
    타 언어에서 사용하는 Dictionary<key, value>와 유사하다.

---------------------------------------------------------------------*/
let arrTu: [string, number] = ['hi', 10]

// 정의 하지 않은 타입, 인덱스로 접근할 경우 오류가 난다.
arrTu[0].concat('!') // Error, 'number' does not have 'concat'

/* Error code
arrTu[5] = 'hello'; // Error, Property '5' does not exist on type '[string, number]'.
*/


/*--------------------------------------------------------------------

                    Enum - 이넘형 : 특정 값(상수) 들의 집합
                    C, Java와 같은 언어에서 흔하게 쓰이는 타입
---------------------------------------------------------------------*/
enum Avengers { Capt, IronMan, Thor }
let hero: Avengers = Avengers.Capt;

// 인덱스 번호로도 접근할 수 있다.
enum AvengersIndex { Capt, IronMan, Thor }
let heroIndex: string = AvengersIndex[0];

// 원한다면 enum의 인덱스를 사용자 편의로 변경하여 사용할 수도 있다
enum AvengersUse { Capt = 2, IronMan, Thor }
let heroUse: string = AvengersUse[2]; // Capt
heroUse = AvengersUse[4]; // Thor

/*--------------------------------------------------------------------

                    Any - All : 모든 타입에 대해 허용
            자바스크립트로 구현되어 있는 웹 서비스 코드에 타입스크립트를
            점진적으로 적용할 때 활용하면 좋은 타입이다.
---------------------------------------------------------------------*/
let strAny: any = 'hi';
strAny = 1

let numAny: any = 10;
numAny = 'en'

let arrAny: any = ['a', 2, true];
arrAny = {me : 'cononi'}

/*--------------------------------------------------------------------

                    SVoid - undefined, null 만 할당, 
                    함수에 적용 시 반환 값을 설정할 수 없는 타입으로 바뀜

---------------------------------------------------------------------*/
let unuseful: void = undefined;
function notuse(): void {
  console.log('sth');
}


/*--------------------------------------------------------------------

                    Never - 함수의 끝에 절대 도달하지 않는다는 의미를 지닌 타입

---------------------------------------------------------------------*/
// 이 함수는 절대 함수의 끝까지 실행되지 않는다는 의미
function neverEnd(): never {
    while (true) {
  
    }
  }

